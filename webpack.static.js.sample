//pathの読み込み
const path = require("path");

// 本番環境のときはsoucemapを出力させない設定
const enabledSourceMap = process.env.NODE_ENV !== "production";

//mini-css-extract-plugin の読み込み
const MiniCssExtractPlugin = require("mini-css-extract-plugin");

// CssMinimizerPlugin でCSSをminifyする
const CssMinimizerPlugin = require("css-minimizer-webpack-plugin");

const FixStyleOnlyEntriesPlugin = require("webpack-fix-style-only-entries");

const BrowserSyncPlugin = require("browser-sync-webpack-plugin");

const app = {
  mode: "production",
  entry: {
    main: path.resolve(__dirname, "src/ts/index.ts"),
    style: path.resolve(__dirname, "src/scss/style.scss"),
  },
  output: {
    path: path.resolve(__dirname, "dist/static/assets/"),
    filename: "js/[name].js", // [name]にはentry:で指定したキーが入る
  },

  optimization: {
    minimizer: [new CssMinimizerPlugin()],
  },

  module: {
    rules: [
      {
        test: /\.ts$/,
        use: "ts-loader",
      },
      {
        // 対象となるファイルの拡張子(scssかsassかcss)
        test: /\.(sa|sc|c)ss$/,
        // Sassファイルの読み込みとコンパイル
        use: [
          // CSSファイルを抽出するように MiniCssExtractPlugin のローダーを指定
          {
            loader: MiniCssExtractPlugin.loader,
          },
          // CSSをバンドルするためのローダー
          {
            loader: "css-loader",
            options: {
              // CSS内のurl()メソッドの取り込みを禁止
              url: false,
              // production モードでなければソースマップを有効に
              sourceMap: enabledSourceMap,
              // postcss-loader と sass-loader の場合は2を指定
              importLoaders: 2,
              // 0 => no loaders (default);
              // 1 => postcss-loader;
              // 2 => postcss-loader, sass-loader
            },
          },
          // PostCSS（autoprefixer）の設定
          {
            loader: "postcss-loader",
            options: {
              // production モードでなければソースマップを有効に
              sourceMap: enabledSourceMap,
              postcssOptions: {
                // ベンダープレフィックスを自動付与
                plugins: [require("autoprefixer")({ grid: true })],
              },
            },
          },
          // Sass を CSS へ変換するローダー
          {
            loader: "sass-loader",
            options: {
              // dart-sass を優先
              implementation: require("sass"),
              //  production モードでなければソースマップを有効に
              sourceMap: enabledSourceMap,
            },
          },
        ],
      },
    ],
  },
  resolve: {
    extensions: [".ts", ".js"],
  },
  plugins: [
    new MiniCssExtractPlugin({
      // distの中にあるcssフォルダにstyle.cssを出力
      filename: "css/[name].css",
      chunkFilename: "[id].css",
    }),
    new FixStyleOnlyEntriesPlugin(),
    new BrowserSyncPlugin({
      host: "localhost",
      port: 3000,
      server: [
        "./dist/static/",
        "index.html"
      ],
      files: [
        "./dist/static/assets/**/*",
        "./dist/static/**/*.html",
        "./dist/static/*.html",
        "!./node_modules",
        "!./yarn-error.log",
        "!./package.json",
      ],
    }),
  ],
};

module.exports = app;
